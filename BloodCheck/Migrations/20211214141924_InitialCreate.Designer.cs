// <auto-generated />
using System;
using BloodCheck.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodCheck.Migrations
{
    [DbContext(typeof(BloodCheckContext))]
    [Migration("20211214141924_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BloodCheck.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("crm");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DoctorId")
                        .HasName("doctorId");

                    b.HasIndex("Crm")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Crm = "143523",
                            Name = "Julia"
                        },
                        new
                        {
                            DoctorId = 2,
                            Crm = "444444",
                            Name = "Alice"
                        },
                        new
                        {
                            DoctorId = 3,
                            Crm = "309345",
                            Name = "Arthur"
                        },
                        new
                        {
                            DoctorId = 4,
                            Crm = "940481",
                            Name = "Yasmin"
                        },
                        new
                        {
                            DoctorId = 5,
                            Crm = "482345",
                            Name = "Jorge"
                        },
                        new
                        {
                            DoctorId = 6,
                            Crm = "935612",
                            Name = "Ronaldo"
                        },
                        new
                        {
                            DoctorId = 7,
                            Crm = "277077",
                            Name = "Cleide"
                        },
                        new
                        {
                            DoctorId = 8,
                            Crm = "761161",
                            Name = "Clarissa"
                        },
                        new
                        {
                            DoctorId = 9,
                            Crm = "292392",
                            Name = "Joao"
                        },
                        new
                        {
                            DoctorId = 10,
                            Crm = "545454",
                            Name = "Vitor"
                        },
                        new
                        {
                            DoctorId = 11,
                            Crm = "723456",
                            Name = "Gustavo"
                        },
                        new
                        {
                            DoctorId = 12,
                            Crm = "111111",
                            Name = "Elise"
                        },
                        new
                        {
                            DoctorId = 13,
                            Crm = "334345",
                            Name = "Paulo"
                        },
                        new
                        {
                            DoctorId = 14,
                            Crm = "934594",
                            Name = "Godofreda"
                        },
                        new
                        {
                            DoctorId = 15,
                            Crm = "869233",
                            Name = "Elias"
                        });
                });

            modelBuilder.Entity("BloodCheck.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"), 1L, 1);

                    b.Property<decimal>("DeliveryDays")
                        .HasColumnType("numeric(2)")
                        .HasColumnName("deliveryDays");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("price");

                    b.HasKey("ExamId")
                        .HasName("examId");

                    b.ToTable("Exams", (string)null);

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            DeliveryDays = 2m,
                            Description = "TTA - TEMPO DE TROMBOPLASTINA ATIVADA",
                            Price = 5.77m
                        },
                        new
                        {
                            ExamId = 2,
                            DeliveryDays = 3m,
                            Description = "DAU - DOSAGEM DE ACIDO URICO",
                            Price = 1.85m
                        },
                        new
                        {
                            ExamId = 3,
                            DeliveryDays = 3m,
                            Description = "DAG - DOSAGEM DE ALFA-1-GLICOPROTEINA ACIDA",
                            Price = 3.68m
                        },
                        new
                        {
                            ExamId = 4,
                            DeliveryDays = 7m,
                            Description = "DAL - DOSAGEM DE AMILASE",
                            Price = 2.25m
                        },
                        new
                        {
                            ExamId = 5,
                            DeliveryDays = 5m,
                            Description = "DBF - DOSAGEM DE BILIRRUBINA TOTAL E FRACOES",
                            Price = 2.01m
                        },
                        new
                        {
                            ExamId = 6,
                            DeliveryDays = 12m,
                            Description = "DCA - DOSAGEM DE CALCIO",
                            Price = 1.85m
                        },
                        new
                        {
                            ExamId = 7,
                            DeliveryDays = 2m,
                            Description = "DAA - DOSAGEM DE ALFA-1-GLICOPROTEINA ACIDA",
                            Price = 3.68m
                        },
                        new
                        {
                            ExamId = 8,
                            DeliveryDays = 1m,
                            Description = "DDS - DOSAGEM DE SODIO",
                            Price = 1.85m
                        },
                        new
                        {
                            ExamId = 9,
                            DeliveryDays = 6m,
                            Description = "DIT - DETERMINACAO DE INDICE DE TIROXINA LIVRE",
                            Price = 12.54m
                        },
                        new
                        {
                            ExamId = 10,
                            DeliveryDays = 8m,
                            Description = "DSI - DETERMINACAO DE TEMPO DE SANGRAMENTO DE IVY",
                            Price = 9.00m
                        },
                        new
                        {
                            ExamId = 11,
                            DeliveryDays = 3m,
                            Description = "PAA - PESQUISA DE ANTICORPOS IGG ANTITOXOPLASMA",
                            Price = 16.97m
                        },
                        new
                        {
                            ExamId = 12,
                            DeliveryDays = 4m,
                            Description = "DDH - DOSAGEM DE HEMOGLOBINA",
                            Price = 1.53m
                        },
                        new
                        {
                            ExamId = 13,
                            DeliveryDays = 6m,
                            Description = "DFR - DETERMINACAO DE FATOR REUMATOIDE",
                            Price = 2.83m
                        },
                        new
                        {
                            ExamId = 14,
                            DeliveryDays = 1m,
                            Description = "DPR - DOSAGEM DE PROTEINA C REATIVA",
                            Price = 3.93m
                        },
                        new
                        {
                            ExamId = 15,
                            DeliveryDays = 5m,
                            Description = "TFS - TESTE FTA-ABS IGG P/ DIAGNOSTICO DA SIFIL",
                            Price = 10.00m
                        },
                        new
                        {
                            ExamId = 16,
                            DeliveryDays = 13m,
                            Description = "PAI - PESQUISA DE ANTICORPOS IGM ANTITOXOPLASM",
                            Price = 18.55m
                        },
                        new
                        {
                            ExamId = 17,
                            DeliveryDays = 5m,
                            Description = "DUR - DOSAGEM DE UREIA",
                            Price = 18.55m
                        },
                        new
                        {
                            ExamId = 18,
                            DeliveryDays = 3m,
                            Description = "DDP - DOSAGEM DE PROLACTINA",
                            Price = 10.15m
                        },
                        new
                        {
                            ExamId = 19,
                            DeliveryDays = 10m,
                            Description = "TDF - TESTE FTA-ABS IGG P/ DIAGNOSTICO DA SIFILIS",
                            Price = 10.00m
                        },
                        new
                        {
                            ExamId = 20,
                            DeliveryDays = 12m,
                            Description = "DDT - DOSAGEM DE TESTOSTERONA",
                            Price = 10.43m
                        },
                        new
                        {
                            ExamId = 21,
                            DeliveryDays = 8m,
                            Description = "ABG - ANTIBIOGRAMA",
                            Price = 4.98m
                        },
                        new
                        {
                            ExamId = 22,
                            DeliveryDays = 4m,
                            Description = "CDT - CONTAGEM DE RETICULOCITOS",
                            Price = 2.73m
                        },
                        new
                        {
                            ExamId = 23,
                            DeliveryDays = 3m,
                            Description = "PRH - PESQUISA DE FATOR RH (I",
                            Price = 1.37m
                        },
                        new
                        {
                            ExamId = 24,
                            DeliveryDays = 5m,
                            Description = "DFR - DOSAGEM DE FERRITINA",
                            Price = 15.59m
                        },
                        new
                        {
                            ExamId = 25,
                            DeliveryDays = 7m,
                            Description = "DFF - DOSAGEM DE FOSFORO",
                            Price = 1.85m
                        },
                        new
                        {
                            ExamId = 26,
                            DeliveryDays = 9m,
                            Description = "RHV - DETECCAO DE RNA DO HIV-1",
                            Price = 65.00m
                        },
                        new
                        {
                            ExamId = 27,
                            DeliveryDays = 3m,
                            Description = "HPC - PESQUISA DE ANTICORPOS CONTRA O VIRUS DA HEPATITE C (ANTI-HCV)",
                            Price = 18.55m
                        },
                        new
                        {
                            ExamId = 28,
                            DeliveryDays = 2m,
                            Description = "DT3 - DOSAGEM DE TRIIODOTIRONINA (T3)",
                            Price = 8.71m
                        },
                        new
                        {
                            ExamId = 29,
                            DeliveryDays = 11m,
                            Description = "DT4 - DOSAGEM DE TIROXINA (T4)",
                            Price = 8.76m
                        },
                        new
                        {
                            ExamId = 30,
                            DeliveryDays = 6m,
                            Description = "DES - DOSAGEM DE ESTRADIOL",
                            Price = 10.15m
                        });
                });

            modelBuilder.Entity("BloodCheck.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.HasKey("PatientId")
                        .HasName("patientId");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Cpf = "74341671920",
                            Name = "Walmir",
                            Phone = "5195483921"
                        },
                        new
                        {
                            PatientId = 2,
                            Cpf = "12345678911",
                            Name = "Rudinei",
                            Phone = "5118432950"
                        },
                        new
                        {
                            PatientId = 3,
                            Cpf = "32215177721",
                            Name = "Amanda",
                            Phone = "5114345940"
                        },
                        new
                        {
                            PatientId = 4,
                            Cpf = "47397069483",
                            Name = "Lucio",
                            Phone = "5111111111"
                        },
                        new
                        {
                            PatientId = 5,
                            Cpf = "11122233344",
                            Name = "Otavio",
                            Phone = "51968667432"
                        },
                        new
                        {
                            PatientId = 6,
                            Cpf = "10594837474",
                            Name = "Luiza",
                            Phone = "51934663543"
                        },
                        new
                        {
                            PatientId = 7,
                            Cpf = "47121131518",
                            Name = "Bruno",
                            Phone = "5130303030"
                        },
                        new
                        {
                            PatientId = 8,
                            Cpf = "58493067251",
                            Name = "Junior",
                            Phone = "5100000001"
                        },
                        new
                        {
                            PatientId = 9,
                            Cpf = "69705847362",
                            Name = "Pedro",
                            Phone = "5123456780"
                        },
                        new
                        {
                            PatientId = 10,
                            Cpf = "11000111010",
                            Name = "Lucas",
                            Phone = "51999347589"
                        },
                        new
                        {
                            PatientId = 11,
                            Cpf = "31415926535",
                            Name = "Carol",
                            Phone = "51999323214"
                        },
                        new
                        {
                            PatientId = 12,
                            Cpf = "27182818284",
                            Name = "William",
                            Phone = "51923142134"
                        },
                        new
                        {
                            PatientId = 13,
                            Cpf = "12347658761",
                            Name = "Beatriz",
                            Phone = "51940028922"
                        },
                        new
                        {
                            PatientId = 14,
                            Cpf = "9638527410",
                            Name = "Maria",
                            Phone = "51985209630"
                        },
                        new
                        {
                            PatientId = 15,
                            Cpf = "32165498736",
                            Name = "Antoniela",
                            Phone = "51978945612"
                        });
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("requestDate");

                    b.HasKey("RequestId")
                        .HasName("requestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("BloodCheck.Models.RequestExam", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestExams");
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.HasOne("BloodCheck.Models.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodCheck.Models.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BloodCheck.Models.RequestExam", b =>
                {
                    b.HasOne("BloodCheck.Models.Exam", "Exam")
                        .WithMany("RequestExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodCheck.Models.Request", "Request")
                        .WithMany("RequestExams")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodCheck.Models.Doctor", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("BloodCheck.Models.Exam", b =>
                {
                    b.Navigation("RequestExams");
                });

            modelBuilder.Entity("BloodCheck.Models.Patient", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.Navigation("RequestExams");
                });
#pragma warning restore 612, 618
        }
    }
}
