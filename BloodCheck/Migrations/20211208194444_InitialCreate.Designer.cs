// <auto-generated />
using System;
using BloodCheck.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodCheck.Migrations
{
    [DbContext(typeof(BloodCheckContext))]
    [Migration("20211208194444_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BloodCheck.Models.Doctor", b =>
                {
                    b.Property<int>("doctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("doctorId"), 1L, 1);

                    b.Property<string>("crm")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("crm");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("doctorId")
                        .HasName("id Doctors");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("BloodCheck.Models.Exam", b =>
                {
                    b.Property<int>("examId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("examId"), 1L, 1);

                    b.Property<decimal>("deliveryDays")
                        .HasColumnType("numeric(2)")
                        .HasColumnName("deliveryDays");

                    b.Property<string>("description")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("price");

                    b.HasKey("examId")
                        .HasName("Id Exam");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("BloodCheck.Models.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientId"), 1L, 1);

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasColumnType("char(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.HasKey("patientId")
                        .HasName("id Patients");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("requestId"), 1L, 1);

                    b.Property<decimal>("doctorId")
                        .HasColumnType("numeric(4)")
                        .HasColumnName("doctorId");

                    b.Property<decimal>("patientId")
                        .HasColumnType("numeric(4)")
                        .HasColumnName("patientId");

                    b.Property<DateTime>("requestDate")
                        .HasColumnType("date")
                        .HasColumnName("requestDate");

                    b.HasKey("requestId")
                        .HasName("id Requests");

                    b.HasIndex("doctorId")
                        .IsUnique();

                    b.HasIndex("patientId")
                        .IsUnique();

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("BloodCheck.Models.RequestExam", b =>
                {
                    b.Property<int>("examId")
                        .HasColumnType("int");

                    b.Property<int>("requestId")
                        .HasColumnType("int");

                    b.HasKey("examId", "requestId");

                    b.HasIndex("requestId");

                    b.ToTable("RequestExams");
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.HasOne("BloodCheck.Models.Doctor", null)
                        .WithOne("Request")
                        .HasForeignKey("BloodCheck.Models.Request", "doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodCheck.Models.Patient", null)
                        .WithOne("Request")
                        .HasForeignKey("BloodCheck.Models.Request", "patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodCheck.Models.RequestExam", b =>
                {
                    b.HasOne("BloodCheck.Models.Exam", "Exam")
                        .WithMany("RequestExams")
                        .HasForeignKey("examId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodCheck.Models.Request", "Request")
                        .WithMany("RequestExams")
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodCheck.Models.Doctor", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("BloodCheck.Models.Exam", b =>
                {
                    b.Navigation("RequestExams");
                });

            modelBuilder.Entity("BloodCheck.Models.Patient", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("BloodCheck.Models.Request", b =>
                {
                    b.Navigation("RequestExams");
                });
#pragma warning restore 612, 618
        }
    }
}
